# .github/workflows/deploy.yml
name: Deploy

on:
  workflow_run:
    workflows: [ "Run Laravel Tests" ]
    types:
      - completed

jobs:
  deploy:
    environment: production
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy App
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -Eeuo pipefail
            trap 'echo "[deploy] Failed at line $LINENO" >&2' ERR
            cd "${{ secrets.DEPLOY_PATH }}"

            # Ensure correct branch and up-to-date code
            git fetch --prune
            git checkout main
            git pull --ff-only origin main

            # Compute semantic version from last tag and recent commits
            LAST_TAG=$(git describe --tags --abbrev=0 --match 'v*' 2>/dev/null || echo 'v0.0.0')
            COMMITS=$(git log --pretty=%s ${LAST_TAG}..HEAD || true)
            if [ -z "$COMMITS" ]; then
              VERSION="$LAST_TAG"
            else
              BUMP=patch
              echo "$COMMITS" | grep -E 'BREAKING CHANGE|!:' >/dev/null 2>&1 && BUMP=major
              if [ "$BUMP" = "patch" ] && echo "$COMMITS" | grep -E '^feat(\(|:)' >/dev/null 2>&1; then BUMP=minor; fi
              VER=${LAST_TAG#v}
              MA=${VER%%.*}
              REM=${VER#*.}
              MI=${REM%%.*}
              PA=${VER##*.}
              case "$BUMP" in
                major) MA=$((MA+1)); MI=0; PA=0;;
                minor) MI=$((MI+1)); PA=0;;
                patch) PA=$((PA+1));;
              esac
              VERSION="v${MA}.${MI}.${PA}"
            fi
            echo "Computed version: $VERSION"

            # PHP / Composer diagnostics and setup
            echo "PHP: $(php -v | head -n1)"
            if ! command -v composer >/dev/null 2>&1; then
              echo "Composer not found; attempting install..."
              EXPECTED_SIGNATURE=$(curl -s https://composer.github.io/installer.sig)
              php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
              ACTUAL_SIGNATURE=$(php -r "echo hash_file('sha384', 'composer-setup.php');")
              if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]; then echo 'ERROR: Invalid installer signature'; rm composer-setup.php; exit 1; fi
              php composer-setup.php --install-dir=/usr/local/bin --filename=composer --quiet
              rm composer-setup.php
            fi
            echo "Composer: $(composer --version)"
            export COMPOSER_MEMORY_LIMIT=-1

            # Build new .env content without heredoc to avoid EOL issues
            rm -f .env.new
            {
              echo "APP_NAME=${{ vars.APP_NAME || 'Futzo' }}"
              echo "APP_ENV=${{ vars.APP_ENV || 'production' }}"
              echo "APP_DEBUG=${{ vars.APP_DEBUG || 'false' }}"
              echo "APP_URL=${{ vars.APP_URL }}"
              echo
              echo "LOG_CHANNEL=${{ vars.LOG_CHANNEL || 'stack' }}"
              echo "LOG_LEVEL=${{ vars.LOG_LEVEL || 'info' }}"
              echo
              echo "DB_CONNECTION=${{ vars.DB_CONNECTION || 'mysql' }}"
              echo "DB_HOST=${{ vars.DB_HOST }}"
              echo "DB_PORT=${{ vars.DB_PORT || '3306' }}"
              echo "DB_DATABASE=${{ vars.DB_DATABASE }}"
              echo "DB_USERNAME=${{ secrets.DB_USERNAME }}"
              echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
              echo
              echo "BROADCAST_DRIVER=${{ vars.BROADCAST_DRIVER || 'log' }}"
              echo "CACHE_DRIVER=${{ vars.CACHE_DRIVER || 'file' }}"
              echo "FILESYSTEM_DISK=${{ vars.FILESYSTEM_DISK || 'local' }}"
              echo "QUEUE_CONNECTION=${{ vars.QUEUE_CONNECTION || 'sync' }}"
              echo "SESSION_DRIVER=${{ vars.SESSION_DRIVER || 'file' }}"
              echo "SESSION_LIFETIME=${{ vars.SESSION_LIFETIME || '120' }}"
              echo "SESSION_DOMAIN=${{ vars.SESSION_DOMAIN }}"
              echo "SESSION_SECURE_COOKIE=${{ vars.SESSION_SECURE_COOKIE || 'true' }}"
              echo
              echo "REDIS_HOST=${{ vars.REDIS_HOST }}"
              echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}"
              echo "REDIS_PORT=${{ vars.REDIS_PORT || '6379' }}"
              echo
              echo "MAIL_MAILER=${{ vars.MAIL_MAILER || 'ses' }}"
              echo "MAIL_HOST=${{ vars.MAIL_HOST }}"
              echo "MAIL_PORT=${{ vars.MAIL_PORT }}"
              echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}"
              echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}"
              echo "MAIL_ENCRYPTION=${{ vars.MAIL_ENCRYPTION || 'tls' }}"
              echo "MAIL_FROM_ADDRESS=${{ vars.MAIL_FROM_ADDRESS }}"
              echo "MAIL_FROM_NAME=${{ vars.APP_NAME }}"
              echo
              echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}"
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
              echo "AWS_DEFAULT_REGION=${{ vars.AWS_DEFAULT_REGION }}"
              echo "AWS_BUCKET=${{ vars.AWS_BUCKET }}"
              echo "AWS_USE_PATH_STYLE_ENDPOINT=${{ vars.AWS_USE_PATH_STYLE_ENDPOINT || 'false' }}"
              echo
              echo "STRIPE_SECRET=${{ secrets.STRIPE_SECRET }}"
              echo
              echo "TWILIO_SID=${{ secrets.TWILIO_SID }}"
              echo "TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }}"
              echo "TWILIO_VERIFY_SID=${{ secrets.TWILIO_VERIFY_SID }}"
              echo "TWILIO_NUMBER=${{ vars.TWILIO_NUMBER }}"
              echo
              echo "META_PIXEL_ID=${{ vars.META_PIXEL_ID }}"
              echo "META_ACCESS_TOKEN=${{ secrets.META_ACCESS_TOKEN }}"
              echo "META_TEST_EVENT_CODE=${{ vars.META_TEST_EVENT_CODE }}"
              echo
              echo "FACEBOOK_CLIENT_ID=${{ vars.FACEBOOK_CLIENT_ID }}"
              echo "FACEBOOK_CLIENT_SECRET=${{ secrets.FACEBOOK_CLIENT_SECRET }}"
              echo "FACEBOOK_REDIRECT_URI=${{ vars.FRONTEND_URL }}/authorize/facebook/callback"
              echo
              echo "GOOGLE_CLIENT_ID=${{ vars.GOOGLE_CLIENT_ID }}"
              echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}"
              echo "GOOGLE_REDIRECT_URI=${{ vars.FRONTEND_URL }}/authorize/google/callback"
              echo
              echo "WHATSAPP_TOKEN=${{ secrets.WHATSAPP_TOKEN }}"
              echo "WHATSAPP_PHONE_ID=${{ vars.WHATSAPP_PHONE_ID }}"
              echo "WHATSAPP_ACCOUNT_ID=${{ vars.WHATSAPP_ACCOUNT_ID }}"
              echo "WHATSAPP_URL=${{ vars.WHATSAPP_URL || 'https://graph.facebook.com/v22.0' }}"
              echo
              echo "FRONTEND_URL=${{ vars.FRONTEND_URL }}"
              echo
              echo "SANCTUM_STATEFUL_DOMAINS=${{ vars.SANCTUM_STATEFUL_DOMAINS }}"
              echo
              echo "STRIPE_KEY=${{ vars.STRIPE_KEY }}"
              echo
              echo "STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}"
              echo
              echo "CASHIER_CURRENCY=${{ vars.CASHIER_CURRENCY }}"
              echo
              echo "CASHIER_CURRENCY_LOCALE=${{ vars.CASHIER_CURRENCY_LOCALE }}"  
              echo
              echo "LANDING_PAGE_URL=${{ vars.LANDING_PAGE_URL }}"  
              echo
              echo "BILLING_TRIAL_DAYS=${{ vars.BILLING_TRIAL_DAYS }}"
            } > .env.new

            # Preserve existing APP_KEY if present
            if [ -f .env ] && grep -q '^APP_KEY=' .env; then
              grep '^APP_KEY=' .env >> .env.new
            fi
            mv .env.new .env
            echo "APP_VERSION=$VERSION" >> .env

            # Install dependencies
            composer install --no-dev --prefer-dist --no-progress --no-interaction --optimize-autoloader --classmap-authoritative
            php artisan package:discover --ansi

            # Ensure APP_KEY exists (generate only if missing/empty)
            if ! grep -q '^APP_KEY=' .env || [ -z "$(sed -n 's/^APP_KEY=//p' .env)" ]; then
              php artisan key:generate --force
            fi

            # Run migrations and optimize caches
            php artisan config:clear
            php artisan cache:clear
            php artisan migrate --force --no-interaction
            php artisan route:cache
            php artisan view:cache
            php artisan config:cache
            php artisan storage:link || true
            sudo systemctl restart horizon

            # Verifica que Horizon continúe activo tras el despliegue; si falla, mostramos su estado y abortamos.
            if ! php artisan horizon:wait --seconds=15; then
              echo "Horizon no alcanzó el estado RUNNING dentro del tiempo esperado" >&2
              sudo systemctl status horizon --no-pager || true
              exit 1
            fi
            php artisan horizon:status
          EOF
